https://code.google.com/p/hijack-main/

Hijacking power and bandwidth from the mobile phone's audio interface. Creating a cubic-inch peripheral sensor ecosystem for the mobile phone.

HiJack is a hardware/software platform for creating cubic-inch sensor peripherals for the mobile phone. HiJack devices harvest power and use bandwidth from the mobile phone's headset interface. The HiJack platform enables a new class of small and cheap phone-centric sensor peripherals that support plug-and-play operation.

See the Project Homepage for more details: http://www.eecs.umich.edu/~prabal/projects/hijack/

Wendell Capili wrote a really nice tutorial on libHiJack. You can find the 3 parts here:

http://wendellinfinity.wordpress.com/2011/08/21/hijack-in-the-box-part-1/
http://wendellinfinity.wordpress.com/2011/08/21/hijack-in-the-box-part-2/
http://wendellinfinity.wordpress.com/2011/08/21/hijack-in-the-box-part-3/



LibHiJack is a simple library that contains the raw communication interface.
It makes it easy to interact at the lowest level with a HiJack device by
sending and receiving bytes.

How to use this library
=======================

Adding the library to your project
----------------------------------

LibHiJack can be compiled as a static library. There are several resources
online that show you how to add a static library to your project. The
simplest way is to open the project, and make it. Then, add the libHiJack.a
and HiJackMgr.h to your iPhone application.

Short usage example
-------------------

In your application where you plan to send and receive bytes, include the
header file

#import "HiJackMgr.h"

Make your main class a delegate for the HiJackDelegate, and add a HiJackMgr
pointer, e.g.

@interface aurioTouchAppDelegate : NSObject <UIApplicationDelegate, EAGLViewDelegate, HiJackDelegate> {
  ...
  HiJackMgr*					hiJackMgr;
  ...
}

In your 'applicationDidFinishLoading' initialize the HiJack object and
register for its Delegate

	hiJackMgr = [[HiJackMgr alloc] init];
	[hiJackMgr setDelegate:self];

All you are left to do is to write the receive function

-(int) receive:(UInt8)data
{
  ...
}

And use the HiJackMgr pointer to send bytes

	[hiJackMgr send:[slider value]];

Note that the return value of send is 0 if the send is successful, and 1 if
it failed (i.e. HiJack is busy sending something).
